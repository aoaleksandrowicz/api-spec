swagger: '2.0'
info:
  version: 'v1'
  title: 'Services API'
  contact:
    email: hello@overops.com
  description: |
    Main OverOps API.

    All calls must be authenticated using one of the following methods:
      1. Using `username:password`.
      2. Using `x-api-key` header (To generate the token, go to `Settings` --> `Account Settings` in the OverOps App)

securityDefinitions:
  basicAuth:
    type: basic
  ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - basicAuth: []
  - ApiKeyAuth: []
host: api.overops.com
basePath: /api/v1
tags:
  - name: General
    description: Fetching general information about services (Not yet implemented)
  - name: Data Redaction
    description: Fetching and manipulating the data redaction (PII) settings of the service
  - name: Code Redaction
    description: Fetching and manipulating the 3rd party and utility classes settings.
  - name: Views
    description: Fetching information about the views and categories
  - name: View Metrics
    description: Fetching data points about views in order to plot graphs
  - name: Alerts
    description: APIs related to the alerting mechanism
  - name: Events
    description: Event data
schemes:
- "https"
paths:
  /services:
    get:
      tags:
        - General
      description: "List all services"
      responses:
        200:
          description: TBD
        401:
          description: Unauthorized
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}:
    get:
      tags:
        - General
      summary: "Get information about the service (Not yet implemented)"
      description: "Get information about the service (Not yet implemented)"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
      responses:
        200:
          description: TBD
        401:
          description: Unauthorized
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/deployments:
    get:
      tags:
        - General
      summary: "List deployments"
      description: "List deployments"
      parameters:
        - in: query
          name: active
          description: (TBD - Not yet implemented) Show only active deployments
          type: boolean
      responses:
        200:
          description: List of deployments
          schema:
            properties:
              deployments:
                type: "array"
                items:
                  $ref: "#/definitions/Deployment"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings:
    get:
      tags:
        - General
      summary: "Get service settings"
      description: "Get service settings"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: TBD
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/servers:
    get:
      tags:
        - General
      summary: "List servers (Not yet implemented)"
      description: "List servers (Not yet implemented)"
      parameters:
        - in: query
          name: active
          description: Show only active servers
          type: boolean
      responses:
        200:
          description: TBD
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/applications:
    get:
      tags:
        - General
      summary: "List applications (Not yet implemented)"
      description: "List applications (Not yet implemented)"
      parameters:
        - in: query
          name: active
          description: Show only active applications
          type: boolean
      responses:
        200:
          description: TBD
        401:
            $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction:
    get:
      tags:
        - Code Redaction
      summary: "List all environment code redaction"
      description: "List all environment code exclusions and inclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included and excluded classes and packages
          schema:
            properties:
              exclude:
                type: "object"
                properties:
                  classes:
                    type: "array"
                    items:
                      $ref: "#/definitions/ExcludedClassName"
                  packages:
                    type: "array"
                    items:
                      $ref: "#/definitions/ExcludedPackageName"
              include:
                type: "object"
                properties:
                  classes:
                    type: "array"
                    items:
                      $ref: "#/definitions/IncludedClassName"
                  packages:
                    type: "array"
                    items:
                      $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude:
    get:
      tags:
        - Code Redaction
      summary: "List all code exclusions"
      description: "List all code exclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes and packages
          schema:
            properties:
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedClassName"
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded classes"
      description: "List all excluded classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes
          schema:
            properties:
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedClassName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/classes/{class_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: class_name
        type: string
        required: true
        description: Fully qualified Java class name
      - in: path
        name: class_name
        type: string
        required: true
        description: Fully qualified Java class name
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded class"
      description: "Retrieve an excluded class"
      responses:
        200:
          description: An excluded class
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the exclusion list"
      description: "Add a class to the exclusion list. The body class name must match the resource identifier"
      parameters:
       - in: body
         name: class
         schema:
           properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from exclusion"
      description: "Remove a class from the exclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded packages"
      description: "List all excluded packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded packages
          schema:
            properties:
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/packages/{package_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: package_name
        type: string
        required: true
        description: Fully qualified Java package name
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded package"
      description: "Retrieve an excluded package"
      responses:
        200:
          description: An excluded package
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the exclusion list"
      description: "Add a package to the exclusion list. The body package name must match the resource identifier"
      parameters:
       - in: body
         name: package
         schema:
           properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the exclusion list"
      description: "Remove a package from the exclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include:
    get:
      tags:
        - Code Redaction
      summary: "List all code inclusions"
      description: "List all code inclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included classes and packages
          schema:
            properties:
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedClassName"
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all included classes"
      description: "List all included classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included classes
          schema:
            properties:
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedClassName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/classes/{class_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: class_name
        type: string
        required: true
        description: Fully qualified Java class name
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included class"
      description: "Retrieve an included class"
      responses:
        200:
          description: An included class
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedClassName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the inclusion list"
      description: "Add a class to the inclusion list. The body class name must match the resource identifier"
      parameters:
       - in: body
         name: class
         schema:
           properties:
              name:
                $ref: "#/definitions/IncludedClassName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from the inclusion list"
      description: "Remove a class from the inclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all included packages"
      description: "List all included packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included packages
          schema:
            properties:
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/packages/{package_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: package_name
        type: string
        required: true
        description: Fully qualified Java package name
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included package"
      description: "Retrieve an included package"
      responses:
        200:
          description: An included package
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedPackageName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the inclusion list"
      description: "Add a package to the inclusion list. The body package name must match the resource identifier"
      parameters:
       - in: body
         name: package
         schema:
           properties:
              name:
                $ref: "#/definitions/IncludedPackageName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the inclusion list"
      description: "Remove a package from the inclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction:
    get:
      tags:
        - Data Redaction
      summary: "List all data redactions"
      description: "List all data redactions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of data redaction
          schema:
            properties:
              packages:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      example: "com.example"
              patterns:
                type: "array"
                items:
                  $ref: "#/definitions/Pattern"
              identifiers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      example: "password"
              classes:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      example: "IPv4"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/patterns:
    get:
      tags:
        - Data Redaction
      summary: "List all regex patterns"
      description: "List all regex patterns"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of regex patterns
          schema:
            properties:
              patterns:
                type: "array"
                items:
                  $ref: "#/definitions/Pattern"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/patterns/{pattern}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: pattern
        description: A RegEx pattern name
        type: string
        required: true
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a pattern"
      description: "Retrieve a pattern"
      responses:
        200:
          description: A pattern
          schema:
            $ref: '#/definitions/Pattern'
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a pattern"
      description: "Add a RegEx pattern to be redacted. The pattern name must match the resource identifier"
      parameters:
        - in: body
          name: pattern
          schema:
            $ref: '#/definitions/Pattern'
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete a pattern"
      description: "Removes a pattern from the redaction list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/identifiers:
    get:
      tags:
        - Data Redaction
      summary: "List all identifiers"
      description: "List all identifiers"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of identifiers
          schema:
            properties:
              identifiers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      example: "password"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/identifiers/{identifier}:
    get:
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary: "Retrieve an identifier"
      description: "Retrieve an identifier"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties:
              name:
                type: "string"
                example: "password"
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add an identifier"
      description: "Add an identifier. The body identifier name must match the resource identifier"
      operationId: addIdentifier
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
        - name: name
          in: body
          description: Identifier object
          schema:
           properties:
             name:
               type: "string"
               example: "password"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary:  "Delete identifier"
      description: "Delete identifier"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/classes:
    get:
      tags:
        - Data Redaction
      summary: "List all classes"
      description: "List all classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of classes
          schema:
            properties:
              classes:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      example: "IPv4"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/classes/{class_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: class_name
        description: Class name to redact.
        type: string
        required: true
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a class"
      description: "Retrieve a class from the data redaction list"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties:
              name:
                type: "string"
                example: "IPv4"
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add a class for data redaction"
      description: "Add a class to the redaction list. The body class name must match the resource identifier"
      parameters:
       - in: body
         description: A JSON representing a class to add for redaction
         name: name
         schema:
          properties:
            name:
              type: "string"
              example: "IPv4"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary:  "Delete a class"
      description: "Delete a class"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/packages:
    get:
      tags:
        - Data Redaction
      summary: "List all packages"
      description: "List all packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of packages
          schema:
            properties:
              packages:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                      example: "com.example"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/packages/{package_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: package_name
        description: Fully qualified Java package name
        type: string
        required: true
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a package"
      description: "Retrieve a package"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties:
              name:
                type: "string"
                example: "com.example"
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a package"
      description: "Create a package. The body package name must match the resource identifier"
      parameters:
       - in: body
         name: name
         schema:
          properties:
            name:
              type: "string"
              example: "com.example"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete package"
      description: "Delete package"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/categories:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
    get:
      tags:
        - Views
      summary: "List categories"
      description: "List view categories"
      responses:
        200:
          description: List of View Categories and their info
          schema:
            properties:
              categories:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      $ref: "#/definitions/Category"
        401:
          $ref: "#/definitions/UnauthorizedError"
    post:
      tags:
        - Views
      summary: "Create category (Not implemented yet)" #shall be published only when delete call is implemented
      description: "Create category (Not implemented yet)"
      parameters:
        - in: body
          name: category
          description: category properties
          schema:
            $ref: "#/definitions/Category"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        409:
          description: CONFLICT
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/categories/{category_id}/:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: category_id
        description: View category to use
        type: string
        required: true
    get:
      tags:
        - Views
      summary: "Get category details (Not implemented yet)"
      description: "Get category details (Not implemented yet)"
      responses:
        200:
          description: Category info
          schema:
            $ref: "#/definitions/Category"
        401:
          $ref: "#/definitions/UnauthorizedError"
        403:
          $ref: "#/definitions/ForbiddenError"
    delete:
      tags:
        - Views
      summary: "Delete category (Not implemented yet)"
      description: "Delete category (Not implemented yet)"
      responses:
        200:
          OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        403:
          $ref: "#/definitions/ForbiddenError"
  /services/{service_id}/categories/{category_id}/views:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: category_id
        description: View category to use
        type: string
        required: true
    post:
      tags:
        - Views
      summary: "Add view to selected category"
      description: "Add view to selected category"
      parameters:
        - in: body
          description: View ID (string)
          schema:
            name: view_id
            type: String
            example: P12
          required: true
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        403:
          $ref: "#/definitions/ForbiddenError"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/views:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
    get:
      tags:
        - Views
      summary: "List views"
      description: "List views"
      responses:
        200:
          description: List of views including basic info about each view.
          schema:
            properties:
              views:
                type: "array"
                items:
                  $ref: "#/definitions/ViewBasic"
        401:
          $ref: "#/definitions/UnauthorizedError"
    post:
      tags:
        - Views
      summary: "Create view"
      description: "Create view"
      parameters:
        - in: body
          name: view
          description: Single view properties
          schema:
            $ref: "#/definitions/ViewFull"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        409:
          description: CONFLICT
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/views/{view_id}:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
    get:
      tags:
        - Views
      summary: "Get view properties"
      description: "Get full list of view properties"
      responses:
        200:
          description: Full list of view properties
          schema:
            properties:
              views:
                type: "array"
                items:
                  type: "object"
                  description: Single view full properties
                  properties:
                    id:
                      type: "string"
                      example: P12
                    name:
                      type: "string"
                      example: DB Errors
                    description:
                      type: "string"
                      example: This is a DB Errors View
                    shared:
                      type: boolean
                      example: false
                    admin:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    default:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: false
                    filters:
                      $ref: "#/definitions/Filter"
                    alert_on_new:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    alert_on_anomaly:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
        401:
          $ref: "#/definitions/UnauthorizedError"
        403:
          $ref: "#/definitions/ForbiddenError"
        404:
          $ref: "#/definitions/NotFoundError"
    post:
      tags:
        - Views
      summary: "Edit view data"
      description: "Edit view data"
      parameters:
        - in: body
          name: view
          description: Single view properties
          schema:
              $ref: "#/definitions/ViewFull"
      responses:
        200:
          description: OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        403:
          $ref: "#/definitions/ForbiddenError"
        404:
          $ref: "#/definitions/NotFoundError"
    delete:
      tags:
        - Views
      summary: "Delete view (Not implemented yet)"
      description: "Delete view (Not implemented yet)"
      responses:
        200:
          OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        403:
          $ref: "#/definitions/ForbiddenError"
  /services/{service_id}/views/{view_id}/events:
      get:
        tags:
          - Events
        summary: Fetch events details
        description: Fetch events data in a selected timeframe
        parameters:
            - in: path
              name: service_id
              description: Environment to use
              type: string
              required: true
            - in: path
              name: view_id
              description: View to use
              type: string
              required: true
            - in: query
              name: from
              type: string
              description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
              required: true
            - in: query
              name: to
              type: integer
              description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
              required: true
            - in: query
              name: server
              type: string
              description: Server(s) added to the filter
            - in: query
              name: app
              type: string
              description: Application(s) added to the filter
            - in: query
              name: deployment
              type: string
              description: Deployment(s) added to the filter
        responses:
          200:
            description: Event data
            schema:
              properties:
                events:
                  type: "array"
                  items:
                    $ref: "#/definitions/Event"
          401:
            $ref: "#/definitions/UnauthorizedError"
          404:
            $ref: "#/definitions/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/view/graph:
    get:
      tags:
        - View Metrics
      summary: "Fetch event metrics"
      description: "Fetch event metrics"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: query
            name: from
            type: string
            description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
            required: true
          - in: query
            name: to
            type: integer
            description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
            required: true
          - in: query
            name: points
            type: integer
            description: Number of data points to return within the interval
            required: true
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
      responses:
        200:
          description: Event metrics
          schema:
            properties:
              graphs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    type:
                      type: "string"
                      example: "event"
                    id:
                      type: "string"
                      example: "42"
                    points:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          time:
                            type: "string"
                            example: "2018-02-28T22:47:09.038Z"
                          value:
                            type: "number"
                            example: 42
                          contributors:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "string"
                                  example: "42"
                                value:
                                  type: "number"
                                  example: 42
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/entrypoint/graph:
    get:
      tags:
        - View Metrics
      summary: "Fetch Event metrics split by entrypoint"
      description: "Fetch Event metrics split by entrypoint"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: query
            name: from
            type: string
            description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
            required: true
          - in: query
            name: to
            type: integer
            description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
            required: true
          - in: query
            name: points
            type: integer
            description: Number of data points to return within the interval
            required: true
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
      responses:
        200:
          description: Event metrics split by entry point
          schema:
            properties:
              graphs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    type:
                      type: "string"
                      example: "event"
                    id:
                      type: "string"
                      example: "42"
                    points:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          time:
                            type: "string"
                            example: "2018-02-28T22:47:09.038Z"
                          value:
                            type: "number"
                            example: 42
                          contributors:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "string"
                                  example: "42"
                                value:
                                  type: "number"
                                  example: 42
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/event/graph:
    get:
      tags:
        - View Metrics
      summary: "Fetch event metrics split by event"
      description: "Fetch event metrics split by event"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: query
            name: from
            type: string
            description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
            required: true
          - in: query
            name: to
            type: integer
            description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
            required: true
          - in: query
            name: points
            type: integer
            description: Number of data points to return within the interval
            required: true
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
      responses:
        200:
          description: event metrics split by event
          schema:
            properties:
              graphs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    type:
                      type: "string"
                      example: "event"
                    id:
                      type: "string"
                      example: "42"
                    points:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          time:
                            type: "string"
                            example: "2018-02-28T22:47:09.038Z"
                          value:
                            type: "number"
                            example: 42
                          contributors:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "string"
                                  example: "42"
                                value:
                                  type: "number"
                                  example: 42
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/views/{view_id}/anomaly:
    post:
      tags:
        - Alerts
      summary: "Alert on anomalies"
      description: "Alert on anomalies"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: body
            name: anomaly
            description: "the anomaly object"
            schema:
              type: "object"
              properties:
                desc:
                  type: "string"
                  example: "Description"
                timeframe:
                  type: "object"
                  properties:
                    from:
                      type: "string"
                      example: "2018-02-28T22:47:09.038Z"
                    to:
                      type: "string"
                      example: "2018-03-01T22:47:09.038Z"
                    name:
                      type: "string"
                      example: "Last day"
                anomaly:
                  type: "object"
                  properties:
                    periods:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          id:
                            type: "string"
                            example: "1"
                          from:
                            type: "string"
                            example: "2018-03-01T23:10:00.000Z"
                          to:
                            type: "string"
                            example: "2018-03-01T24:10:00.000Z"
                    contributors:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          id:
                            type: "number"
                            example: 1
                          value:
                            type: "number"
                            example: 42
      responses:
        200:
          OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/labels:
    parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
    get:
        tags:
          - Labels
        summary: "List labels"
        description: "List all existing labels"
        responses:
          200:
            description: List of labels
            schema:
              properties:
                labels:
                  type: "array"
                  items:
                    $ref: "#/definitions/Label"
          401:
            $ref: "#/definitions/UnauthorizedError"
    post:
      tags:
        - Labels
      summary: "Create new label"
      description: "Create new label"
      parameters:
        - in: body
          name: label
          description: Single label
          schema:
            $ref: "#/definitions/Label"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
        409:
          description: CONFLICT
  /services/{service_id}/events/{event_id}:
    get:
      tags:
        - Events
      summary: "Fetch event data"
      description: "Fetch event data"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: event_id
            description: Event to use
            type: string
            required: true
      responses:
        200:
          description: Event data
          schema:
            $ref: "#/definitions/Event"
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/events/{event_id}/labels:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
    post:
      tags:
        - Labels
      summary: "Add/Remove labels"
      description: "Append/Detach labels to/from event"
      parameters:
        - in: body
          name: add
          description: list of label names to append
          schema:
            properties:
              add:
                type: "array"
                items:
                  type: "string"
                  example: "Critical"
        - in: body
          name: remove
          description: list of label names to detach from event
          schema:
            properties:
              remove:
                type: "array"
                items:
                  type: "string"
                  example: "Low"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          description: NOT FOUND
  /services/{service_id}/events/{event_id}/inbox:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
    post:
      tags:
        - Labels
      summary: "Move to Inbox"
      description: "Move the specified event into Inbox"
      responses:
        200:
          description: OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          description: NOT FOUND
  /services/{service_id}/events/{event_id}/delete:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
    post:
      tags:
        - Labels
      summary: "Move to Trash"
      description: "Move the specified event into Trash"
      responses:
        200:
          description: OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          description: NOT FOUND
  /services/{service_id}/events/{event_id}/resolve:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
    post:
      tags:
        - Labels
      summary: "Mark as resolved"
      description: "Marks the specified event as resolved"
      responses:
        200:
          description: OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          description: NOT FOUND
  /services/{service_id}/events/{event_id}/snapshots:
    get:
      tags:
        - Events
      summary: "Fetch event snapshot"
      description: "Fetch event snapshot.
        Fetches the last relevant snapshot for the specific filters provided.
        All filters are optional."
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: event_id
            description: Event to use
            type: string
            required: true
          - in: query
            name: from
            type: string
            description: Start time of requested timeframe. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          - in: query
            name: to
            type: integer
            description: End time of requested timeframe. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
          - in: query
            name: similar_event_id
            type: string
            description: Event(s) added to the filter
      responses:
        200:
          description: Link to snapshot
          schema:
            type: "object"
            properties:
              link:
                type: "string"
                example: "https://app.overops.com/tale.html?event=Ux42fkaa--"
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
    delete:
      tags:
        - Events
      summary: "Delete all event snapshots"
      description: "Removes all existing snapshots for an event. All snapshots will be permanently deleted. Event statistics will be kept."
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/events/{event_id}/force-snapshot:
    parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
    post:
      tags:
        - Events
      summary: Force Event Snapshot
      description: Force snapshot on the next time the event occurs
      responses:
        200:
          description: OK
        401:
          $ref: "#/definitions/UnauthorizedError"
definitions:
  UnauthorizedError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 401
      type:
        type: string
        example: Unauthorized
      message:
        type: string
        example: Not authorized to perform action
  NotFoundError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 404
      type:
        type: string
        example: Resource Not Found
      message:
        type: string
        example: Resource Not Found
  ForbiddenError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 403
      type:
        type: string
        example: Access forbidden
      message:
        type: string
        example: Access forbidden
  Pattern:
    description: A data redaction pattern used to define PII RegEx
    type: object
    properties:
      name:
        type: "string"
        example: "Visa"
      category:
        type: "string"
        example: "Credit Card"
      regex:
        type: "string"
        example: "\\b4\\d{3}([\\-\\ ]?)(?:\\d{4}\\1){2}\\d(?:\\d{3})?\\b"
      is_active:
        type: "boolean"
        example: true
  IncludedClassName:
    type: string
    example: "com.company.GoodClassName"
  IncludedPackageName:
    type: string
    example: "com.company.package.good"
  ExcludedClassName:
    type: string
    example: "com.company.BadClassName"
  ExcludedPackageName:
    type: string
    example: "com.company.package.bad"
  ViewBasic:
    type: "object"
    properties:
      id:
        type: "string"
        example: P12
      name:
        type: "string"
        example: DB Errors
      shared:
        type: boolean
        example: false
  ViewFull:
    type: "object"
    description: Single view full properties
    properties:
      name:
        type: "string"
        example: DB Errors
      description:
        type: "string"
        example: This is a DB Errors View
      shared:
        type: boolean
        example: false
      admin:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
      default:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: false
      filters:
        $ref: "#/definitions/Filter"
      alert_on_new:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
      alert_on_anomaly:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
  Category:
    description: Single category properties
    type: "object"
    properties:
      id:
        type: String
        example: B345
      name:
        type: "string"
        description: Category Name
        example: CI/CD
      shared:
        type: boolean
        description: Indicates whether this category is visible for all users under this key or only for the category creator.
        example: false
      admin:
        type: boolean
        description: (TBD - NOT YET IMPLEMENTED) marks the category as visible only to key admins
        example: true
      icon:
        type: "string"
        description: (TBD - NOT YET IMPLEMENTED) based 64 encoded SVG
      views:
        type: array
        items:
          $ref: "#/definitions/ViewBasic"
  Filter:
    description: Filter properties
    type: object
    properties:
      first_seen:
        type: object
        description: Defines the first time an event occured using a absolute time frame or a relative ime frame. If absolute time frame is defined, the relative will be ignored.
        properties:
          absolute:
            type: object
            properties:
              from:
                type: string
                description: Start time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
                example: 2018-02-28T22:47:09.038+02:00
              to:
                type: string
                description: End time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
                example: 2018-02-28T22:47:09.038+02:00
          relative:
            type: string
            enum: [last_hour, last_3h, last_6h, last_12h, last_24h, last_48h, last_7d, last_14d, last_30d]
            example: "last_6h"
      labels:
        type: array
        description: List of labels
        items:
          type: string
          example: Jira
      event_type:
        type: array
        description: List of event types
        items:
          type: string
          enum: [Uncaught Exceptions, Caught Exceptions, Swallowed Exceptions, Logged Warnings, Logged Errors, HTTP Errors, Timers]
          example: Swallowed Exceptions
      event_name:
        type: array
        description: (Not implemented yet) List of event names
        items:
          type: string
          example: IndexOutOfBoundsException
      event_location:
        type: array
        description: (Not implemented yet) List of event locations
        items:
          type: string
          example: DotConnect
      event_package:
        type: array
        description: (Not implemented yet) List of event packages
        items:
          type: string
          example: com.dotmarketing.servlets
      entry_point:
        type: array
        description: (Not implemented yet) List of entrypoints
        items:
          type: string
      servers:
        type: array
        description: (Not implemented yet) List of server names
        items:
          type: string
          example: na-dotCMS-2
      apps:
        type: array
        description: (Not implemented yet) List of application names
        items:
          type: string
          example: API
      deployments:
        type: array
        description: (Not implemented yet) List of deployment names
        items:
          type: string
          example: 2018-04-11-2
      introduced_by:
        type: array
        description: (Not implemented yet) Filters events by deployment they originated in
        items:
          type: string
          example: Unnamed Deployment
      search:
        type: string
        description: (Not implemented yet) Free text search
  Event:
    description: An exception, logged error and more
    type: object
    properties:
      id:
        type: "string"
        example: "1"
      summary:
        type: "string"
        example: "NullPointerException in Main.main"
      type:
        type: "string"
        example: "NullPointerException"
      first_seen:
        type: "string"
        example: "2018-02-28T22:47:09.038Z"
      introduced_by:
        type: "string"
        example: "1.201.1"
      labels:
        type: "array"
        items:
          type: "string"
          example: "Critical"
      similar_event_ids:
        type: "array"
        items:
          type: "string"
          example: "K2"
      error_location:
        $ref: "#/definitions/CodeLocation"
      entry_point:
        $ref: "#/definitions/CodeLocation"
      jira_ticket:
        type: string
        example: OO-1234
  Label:
    type: object
    properties:
      name:
        type: string
        example: HighPriority
      type:
        type: "string"
        enum:
          - DEFAULT
          - USER
        example: USER
      color: #consider adding available colors as enum
        type: string
        example: RED
  Deployment:
    type: object
    properties:
      name:
        type: string
        example: stage1.0.4
      active:
        type: boolean
        example: true
  CodeLocation:
    description: A code location, for error location, etc
    type: object
    properties:
      prettified_name:
        type: "string"
        example: "Main.main"
      class_name:
        type: "string"
        example: "com.company.Main"
      method_name:
        type: "string"
        example: "main"
      method_desc:
        type: "string"
        example: "([Ljava/lang/String;)V"
