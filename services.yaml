swagger: '2.0'
info:
  version: 'v1'
  title: 'Services API'
  contact:
    email: hello@overops.com
  description: |
    Main OverOps API.
    The REST API layer enables OverOps admins and users to perform and automate all actions
    provided by the OverOps UI available at https://app.overops.com (or On-premises equivalent URL) via a platform independent programmatic interface.
    A wrapper Java client API library that leverages these APIs for convenience by
    Java and Scala developers is available at https://github.com/takipi/api-client and on Maven Central.

    All calls must be authenticated using one of the following methods:
      1. Using `x-api-key` header (To generate the token, go to `Settings` --> `Account Settings` in the OverOps App). This is the recommended method.
      2. Using Basic auth with `username:password` combo.

securityDefinitions:
  basicAuth:
    type: basic
  ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - basicAuth: []
  - ApiKeyAuth: []
host: api.overops.com
basePath: /api/v1
tags:
  - name: General
    description: Fetch general information about provisioned OverOps enviroments
  - name: Team Management
    description: APIs related to team management of a service
  - name: Data Redaction
    description: Fetch and manipulate data redaction of PII with target environments.
  - name: Code Filters
    description: Fetch and manipulate code filters to include / exclude 3rd party and utility classes  from OverOps analysis and data capture.
  - name: Views
    description: Fetch and manipulate grouping of events (i.e. Views) according to attribute sets (e.g. "uncaught exceptions", "errors from package com.acme")
  - name: Categories
    description: Fetch and manipulate grouping of views into logical categories (e.g "CI/CD", "Favorites")
  - name: View Metrics
    description: Fetch volumetric time series data about observed code events within OverOps monitored applications filtered by server cluster, application and deployments.
  - name: Alerts
    description: Fetch and manipulate alerting rules for detecting and disseminating anomalies such as introduction of new events and regressions to different communication channels (e.g. Email, Jira, Slack, Uder defined Functions).
  - name: Events
    description: Fetch and manipulate OverOps Automated Root Cause Events and Snapshots
  - name: Timers
    description: Fetch and manipulate OverOps Timers - bottleneck detection and performance diagnosis
  - name: UDFs
    description: Fetch and manipulate User Defined Functinos - OverOps extensions using Lambdas.
schemes:
- "https"
paths:
  /global-settings/udfs:
    get:
      tags:
        - UDFs
      summary: List available UDF libraries
      description: List available UDF (User Defined Functions) libraries
      responses:
        200:
          description: UDF libraries list
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - UDFs
      summary: Add a new UDF library
      description: Add a new UDF library
      parameters:
        - in: body
          name: udf
          schema:
            type: object
            properties:
              udf:
                type: string
                format: binary
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /global-settings/udfs/{library_id}:
    get:
      tags:
        - UDFs
      summary: Get UDF library properties
      description: Get UDF (User Defined Function) library properties
      parameters:
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: UDF library properties
          schema:
            $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - UDFs
      summary: "Remove UDF library (TBD - Not yet implemented)"
      description: "Remove UDF library (TBD - Not yet implemented)"
      parameters:
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services:
    get:
      tags:
        - General
      summary: "List all environments"
      description: "List all environments accessible to the calling user"
      parameters:
        - in: query
          name: name
          description: Environment key name
          type: string
      responses:
        200:
          description: List of all accessible environments to the calling user
          schema:
            type: object
            properties:
              services:
                type: array
                description: list of environment
                items:
                  $ref: "#/definitions/EnvironmentWithRole"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - General
      summary: Generate a new environment key
      description: "Defines a new environment"
      parameters:
        - in: body
          name: name
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        200:
          description: New environment key properties
          schema:
            $ref: "#/definitions/EnvironmentBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}:
    get:
      tags:
        - General
      summary: "Get information about the environment (Not yet implemented)"
      description: "Get information about the environment (Not yet implemented)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/TBD"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - General
      summary: Rename an environment
      description: "Rename an environment. This call is allowed for admins only"
      parameters:
        - in: body
          name: name
          schema:
            properties:
              name:
                type: string
      responses:
        200:
          description: Updated environment properties
          schema:
            $ref: "#/definitions/EnvironmentBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/team:
    get:
      tags:
        - General
      summary: "List environment team members"
      description: "List team members with access to this environment"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: email
          description: Team member email
          type: string
      responses:
        200:
          description: List of team members
          schema:
            $ref: "#/definitions/TeamMembersFull"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Team Management
      summary: "Edit Team members"
      description: "Add new members / Update role for existing members."
      parameters:
          - in: path
            name: env_id
            description: Environment to use
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembersBasic"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Team Management
      summary: "Delete members from an environment"
      description: "Delete members from an environment. This call requires admin role"
      parameters:
          - in: path
            name: env_id
            description:  Environment ID to use (e.g. S1234)
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembersBasic"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings:
    get:
      tags:
        - General
      summary: "Get environment settings"
      description: "Get environment settings"
      parameters:
        - in: path
          name: env_id
          description:  Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/TBD"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/servers:
    get:
      tags:
        - General
      summary: "List servers"
      description: "List all (or just active) servers that were used to monitor applications.
        These can be either the IP/Hostname of a host or a cluster identifier. [How to name your Server](https://doc.overops.com/docs/naming-your-application-server-deployment)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: active
          description: Show only active servers
          type: boolean
      responses:
        200:
          description: List of servers
          schema:
            properties:
              servers:
                type: array
                items:
                  $ref: "#/definitions/Server"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/applications:
    get:
      tags:
        - General
      summary: "List applications"
      description: "List all (or just active) applications that were used to monitor applications.
        These can be either an application name, an integration suite name or a specific instance. [How to name your Application](https://doc.overops.com/docs/naming-your-application-server-deployment)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: active
          description: Show only active applications
          type: boolean
      responses:
        200:
          description: List of applications
          schema:
            properties:
              applications:
                type: array
                items:
                  $ref: "#/definitions/Application"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/deployments:
    get:
      tags:
        - General
      summary: "List deployments"
      description: "List all (or just active) deployments that were monitoring in the environment.
        These can be either the Jenkins build number, Git commit, Maven version, etc. [How to tag your deployment](https://doc.overops.com/docs/naming-your-application-server-deployment)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: active
          description: Show only active deployments
          type: boolean
      responses:
        200:
          description: List of deployments
          schema:
            properties:
              deployments:
                type: array
                items:
                  $ref: "#/definitions/Deployment"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction:
    get:
      tags:
        - Code Redaction
      summary: "List all environment code redaction settings"
      description: "List all environment code exclusions and inclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included and excluded classes and packages
          schema:
            type: object
            properties:
              exclude:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/ExcludedClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/ExcludedPackageName"
              include:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/IncludedClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude:
    get:
      tags:
        - Code Redaction
      summary: "List all code exclusions"
      description: "List all code exclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes and packages
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ExcludedClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded classes"
      description: "List all excluded classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ExcludedClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/classes/{class_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded class"
      description: "Retrieve an excluded class"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          description: An excluded class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the exclusion list"
      description: "Add a class to the exclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from exclusion"
      description: "Remove a class from the exclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded packages"
      description: "List all excluded packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of excluded packages
          schema:
            type: object
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/packages/{package_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded package"
      description: "Retrieve an excluded package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          description: An excluded package
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the exclusion list"
      description: "Add a package to the exclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the exclusion list"
      description: "Remove a package from the exclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include:
    get:
      tags:
        - Code Redaction
      summary: "List all code inclusions"
      description: "List all code inclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included classes and packages
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/IncludedClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all included classes"
      description: "List all included classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/IncludedClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/classes/{class_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included class"
      description: "Retrieve an included class"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          description: An included class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/IncludedClassName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the inclusion list"
      description: "Add a class to the inclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/IncludedClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from the inclusion list"
      description: "Remove a class from the inclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all included packages"
      description: "List all included packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included packages
          schema:
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/packages/{package_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included package"
      description: "Retrieve an included package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          description: An included package
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the inclusion list"
      description: "Add a package to the inclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedPackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the inclusion list"
      description: "Remove a package from the inclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction:
    get:
      tags:
        - Data Redaction
      summary: "List all data redactions"
      description: "List all data redactions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of data redaction
          schema:
            type: object
            properties:
              packages:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com.example"
              patterns:
                type: array
                items:
                  $ref: "#/definitions/Pattern"
              identifiers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "password"
              classes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/patterns:
    get:
      tags:
        - Data Redaction
      summary: "List all regex patterns"
      description: "List all regex patterns"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of regex patterns
          schema:
            type: object
            properties:
              patterns:
                type: array
                items:
                  $ref: "#/definitions/Pattern"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/patterns/{pattern}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a pattern"
      description: "Retrieve a pattern"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
      responses:
        200:
          description: A pattern
          schema:
            $ref: '#/definitions/Pattern'
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a pattern"
      description: "Add a RegEx pattern to be redacted. The pattern name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
        - in: body
          name: pattern
          schema:
            $ref: '#/definitions/Pattern'
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete a pattern"
      description: "Removes a pattern from the redaction list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/identifiers:
    get:
      tags:
        - Data Redaction
      summary: "List all identifiers"
      description: "List all identifiers"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of identifiers
          schema:
            type: object
            properties:
              identifiers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "password"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/identifiers/{identifier}:
    get:
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary: "Retrieve an identifier"
      description: "Retrieve an identifier"
      responses:
        200:
          description: If the redaction exists
          schema:
            type: object
            properties:
              name:
                type: string
                example: "password"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add an identifier"
      description: "Add an identifier. The body identifier name must match the resource identifier"
      operationId: addIdentifier
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
        - name: name
          in: body
          description: Identifier object
          schema:
            type: object
            properties:
              name:
                type: string
                example: "password"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary:  "Delete identifier"
      description: "Delete identifier"
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/classes:
    get:
      tags:
        - Data Redaction
      summary: "List all classes"
      description: "List all classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/classes/{class_name}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a class"
      description: "Retrieve a class from the data redaction list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
      responses:
        200:
          description: If the redaction exists
          schema:
            type: object
            properties:
              name:
                type: string
                example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add a class for data redaction"
      description: "Add a class to the redaction list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
        - in: body
          description: A JSON representing a class to add for redaction
          name: name
          schema:
            type: object
            properties:
              name:
                type: string
                example: "IPv4"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary:  "Delete a class"
      description: "Delete a class"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/packages:
    get:
      tags:
        - Data Redaction
      summary: "List all packages"
      description: "List all packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of packages
          schema:
            type: object
            properties:
              packages:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com.example"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/packages/{package_name}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a package"
      description: "Retrieve a package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
      responses:
        200:
          description: If the redaction exists
          schema:
            type: object
            properties:
              name:
                type: string
                example: "com.example"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a package"
      description: "Create a package. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
        - in: body
          name: name
          schema:
            type: object
            properties:
              name:
                type: string
                example: "com.example"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete package"
      description: "Delete package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/storage-settings:
    get:
      tags:
        - General
      summary: "Get storage settings of an environment"
      description: "In Hybrid OverOps installation, data collected from your JVMs is locally redacted for PII and encrypted using your private encryption key before it is stored in a server that resides behind your firewall. Use this API call to fetch the current settings of your storage server. Visit OverOps [Hybrid Deployment Overview](https://doc.overops.com/docs/hybrid-deployment-overview) for full information"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: Storage settings
          schema:
            $ref: "#/definitions/StorageSettings"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - General
      summary: "Set storage settings for a service"
      description: "In Hybrid OverOps installation, data collected from your JVMs is locally redacted for PII and encrypted using your private encryption key before it is stored in a server that resides behind your firewall. This API call allows you to configure your storage server as part of your Hybrid OverOps setup. Visit OverOps [Hybrid Deployment Overview](https://doc.overops.com/docs/hybrid-deployment-overview) for full information"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: storage_settings
          schema:
            $ref: "#/definitions/StorageSettings"
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/categories:
    get:
      tags:
        - Categories
      summary: "List categories"
      description: "List view categories"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of View Categories and their info
          schema:
            type: object
            properties:
              categories:
                type: array
                items:
                  $ref: "#/definitions/Category"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Categories
      summary: "Create category (Not implemented yet)" #shall be published only when delete call is implemented
      description: "Create category (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: category
          description: category properties
          schema:
            $ref: "#/definitions/Category"
      responses:
        200:
          $ref: "#/responses/TBD"
        400:
          $ref: "#/responses/BadRequestError"
        409:
          $ref: "#/responses/Conflict"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/categories/{category_id}:
    get:
      tags:
        - Categories
      summary: "Get category details (Not implemented yet)"
      description: "Get category details (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
      responses:
        200:
          description: Category info
          schema:
            $ref: "#/definitions/Category"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
    delete:
      tags:
        - Categories
      summary: "Delete category (Not implemented yet)"
      description: "Delete category (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{env_id}/categories/{category_id}/views:
    post:
      tags:
        - Views
        - Categories
      summary: "Add view to selected category"
      description: "Add view to selected category"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
        - in: body
          description: View ID (string)
          name: view_id
          required: true
          schema:
            type: string
            example: P12
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        403:
          $ref: "#/responses/ForbiddenError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/views:
    get:
      tags:
        - Views
      summary: "List views"
      description: "List views"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of views including basic info about each view.
          schema:
            type: object
            properties:
              views:
                type: array
                items:
                  $ref: "#/definitions/ViewBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Views
      summary: "Create view"
      description: "Create view"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: view
          description: Single view properties
          schema:
            $ref: "#/definitions/ViewFull"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        409:
          $ref: "#/responses/Conflict"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/views/{view_id}:
    get:
      tags:
        - Views
        - Alerts
      summary: "Get view properties"
      description: "Get full list of view properties"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          description: Full list of view properties
          schema:
            type: object
            properties:
              views:
                type: array
                items:
                  type: object
                  description: Single view full properties
                  properties:
                    id:
                      type: string
                      example: P12
                    name:
                      type: string
                      example: DB Errors
                    description:
                      type: string
                      example: This is a DB Errors View
                    shared:
                      type: boolean
                      example: false
                    admin:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    default:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: false
                    filters:
                      $ref: "#/definitions/Filter"
                    alert_on_new:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    alert_on_anomaly:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - Views
        - Alerts
      summary: "Edit view data"
      description: "Edit view data"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: body
          name: view
          description: Single view properties
          schema:
              $ref: "#/definitions/ViewFull"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Views
      summary: "Delete view (Not implemented yet)"
      description: "Delete view (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{env_id}/views/{view_id}/events:
    get:
      tags:
        - Views
        - Events
      summary: Fetch events details
      description: Fetch events data for a target timeframe, application / server / deployment set.
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include event volumes (e.g. number of event instances and calls into the method containing the event) in the response
      responses:
        200:
          description: Event data
          schema:
            type: object
            properties:
              events:
                type: array
                items:
                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/entrypoints:
    get:
      tags:
        - Views
        - Events
      summary: Fetch entrypoints details
      description: Fetch entrypoints data in a selected timeframe
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
      responses:
        200:
          description: Entrypoints data
          schema:
            type: object
            properties:
              entrypoints:
                type: array
                items:
                  $ref: "#/definitions/EntryPoint"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/metrics/view/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics"
      description: "Fetch event metrics"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event metrics
          schema:
            type: object
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/metrics/entrypoint/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by entrypoint"
      description: "Fetch event metrics split by entrypoint"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event metrics split by entry point
          schema:
            type: object
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/metrics/event/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by event"
      description: "Fetch event metrics split by event"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: event metrics split by event
          schema:
            type: object
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/anomaly:
    post:
      tags:
        - Views
        - Alerts
      summary: "Alert on anomalies"
      description: "Alert on anomalies"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: body
          name: anomaly
          description: "the anomaly object"
          schema:
            type: object
            properties:
              desc:
                type: string
                example: "Description"
              timeframe:
                type: object
                properties:
                  from:
                    type: string
                    example: "2018-02-28T22:47:09.038Z"
                  to:
                    type: string
                    example: "2018-03-01T22:47:09.038Z"
                  name:
                    type: string
                    example: "Last day"
              anomaly:
                type: object
                properties:
                  periods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "1"
                        from:
                          type: string
                          example: "2018-03-01T23:10:00.000Z"
                        to:
                          type: string
                          example: "2018-03-01T24:10:00.000Z"
                  contributors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        value:
                          type: number
                          example: 42
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/labels:
    get:
      tags:
        - Labels
      summary: "List labels"
      description: "List all existing labels"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of labels
          schema:
            type: object
            properties:
              labels:
                type: array
                items:
                  $ref: "#/definitions/Label"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Labels
      summary: "Create new label"
      description: "Create a new label. Labels are used to tag events with custom classifications. Labels help support use cases such as classifying an event as severe / regressed, assign it to a specific developer or team (e.g prod-team-A) or any other user defined categorization."
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: label
          description: Single label
          schema:
            $ref: "#/definitions/Label"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/Conflict"
  /services/{env_id}/events/labels:
    post:
      tags:
        - Labels
      summary: "Batch Add/Remove labels"
      description: "Append/Detach labels to/from events"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
        - in: body
          name: item
          description: list of events and label names to append/detach
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: string
                      example: 42
                    add:
                      type: array
                      items:
                        type: string
                        example: "Critical"
                    remove:
                      type: array
                      items:
                        type: string
                        example: "Low"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}:
    get:
      tags:
        - Events
      summary: "Fetch event data"
      description: "Fetch event data"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          description: Event data
          schema:
            $ref: "#/definitions/Event"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/labels:
    post:
      tags:
        - Labels
      summary: "Add/Remove labels"
      description: "Append and remove label(s) from an event"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
        - in: body
          name: item
          description: list of label names to add / remove
          schema:
            type: object
            properties:
              add:
                type: array
                items:
                  type: string
                  example: "Critical"
              remove:
                type: array
                items:
                  type: string
                  example: "Low"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/inbox:
    post:
      tags:
        - Labels
      summary: "Move to Inbox"
      description: "Move the specified event into Inbox"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/delete:
    post:
      tags:
        - Labels
      summary: "Move to Trash"
      description: "Move the specified event into Trash"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/resolve:
    post:
      tags:
        - Labels
      summary: "Mark as resolved"
      description: "Marks the specified event as resolved"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/snapshot:
    get:
      tags:
        - Events
      summary: "Fetch event snapshot"
      description: "Fetch event snapshot.
        Fetches the last relevant snapshot for the specific filters provided.
        All filters are optional."
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: similar_event_id
          type: string
          description: Event(s) added to the filter
      responses:
        200:
          description: Link to snapshot
          schema:
            type: object
            properties:
              link:
                type: string
                example: "https://app.overops.com/tale.html?event=Ux42fkaa--"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/snapshots:
    delete:
      tags:
        - Events
      summary: "Delete all event snapshots"
      description: "Removes all existing snapshots for an event. All snapshots will be permanently deleted. Event statistics will be kept."
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/force-snapshot:
    post:
      tags:
        - Events
      summary: Force Event Snapshot
      description: Force snapshot for the next time the event occurs
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/events/{event_id}/actions:
    get:
      tags:
        - Events
      summary: "Fetch event actions"
      description: "Fetch event actions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: type
          description: Filter by specific type
          type: string
      responses:
        200:
          description: Event actions
          schema:
            type: array
            items:
              $ref: "#/definitions/EventAction"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/udfs:
    get:
      tags:
        - UDFs
      summary: List available UDF libraries for the environment
      description: List all available UDFs (User Defined Functions) for selected environment
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: UDF libraries list
          schema:
            type: array
            items:
              $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - UDFs
      summary: Add a new UDF library
      description: Add a new UDF library
      consumes:
        - application/octet-stream
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body # TBD should just be an octet string of a file. will be fixed later
          name: udf
          schema:
            type: object
            properties:
              udf:
                type: string
                format: binary
      responses:
        200:
          description: UDF library was successfully added
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/udfs/{library_id}:
    get:
      tags:
        - UDFs
      summary: Get UDF library properties
      description: Get UDF (User Defined Function) library properties
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: UDF properties
          schema:
            $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - UDFs
      summary: Remove UDF library from the environment
      description: Remove UDF library from specified environment
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/timers:
    get:
      tags:
        - Timers
      summary: "List timers"
      description: "List all existing timers"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of timers
          schema:
            type: object
            properties:
              timers:
                type: array
                items:
                  $ref: "#/definitions/Timer"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Timers
      summary: "Create new timer"
      description: "Create new timer"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: timer
          description: Single timer
          schema:
            $ref: "#/definitions/Timer"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/Conflict"
  /services/{env_id}/timers/{timer_id}:
    get:
      tags:
        - Timers
      summary: "Get timer properties"
      description: "Get timer properties"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: timer_id
          description: Timer to use
          type: string
          required: true
      responses:
        200:
          description: Timer properties
          schema:
            $ref: "#/definitions/Timer"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Timers
      summary: "Edit timer data"
      description: "Edit timer data"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: timer_id
          description: View to use
          type: string
          required: true
        - in: body
          name: view
          description: Single timer properties
          schema:
              $ref: "#/definitions/Timer"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Timers
      summary: "Delete timer"
      description: "Delete timer"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: timer_id
          description: Timer to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
definitions:
  Pattern:
    description: A data redaction pattern used to define PII RegEx
    type: object
    properties:
      name:
        type: string
        example: "Visa"
      category:
        type: string
        example: "Credit Card"
      regex:
        type: string
        example: "\\b4\\d{3}([\\-\\ ]?)(?:\\d{4}\\1){2}\\d(?:\\d{3})?\\b"
      is_active:
        type: boolean
        example: true
  IncludedClassName:
    type: string
    example: "com.company.GoodClassName"
  IncludedPackageName:
    type: string
    example: "com.company.package.good"
  ExcludedClassName:
    type: string
    example: "com.company.BadClassName"
  ExcludedPackageName:
    type: string
    example: "com.company.package.bad"
  ViewBasic:
    type: object
    properties:
      id:
        type: string
        example: P12
      name:
        type: string
        example: DB Errors
      shared:
        type: boolean
        example: false
  ViewFull:
    type: object
    description: Single view full properties
    properties:
      name:
        type: string
        example: DB Errors
      description:
        type: string
        example: This is a DB Errors View
      shared:
        type: boolean
        example: false
      admin:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
      default:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: false
      filters:
        $ref: "#/definitions/Filter"
      alert_on_new:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
      alert_on_anomaly:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
  Category:
    type: object
    description: Single category properties
    properties:
      id:
        type: string
        example: B345
      name:
        type: string
        description: Category Name
        example: CI/CD
      shared:
        type: boolean
        description: Indicates whether this category is visible for all users under this key or only for the category creator.
        example: false
      admin:
        type: boolean
        description: (TBD - NOT YET IMPLEMENTED) marks the category as visible only to key admins
        example: true
      icon:
        type: string
        description: (TBD - NOT YET IMPLEMENTED) based 64 encoded SVG
      views:
        type: array
        items:
          $ref: "#/definitions/ViewBasic"
  Filter:
    description: Filter properties
    type: object
    properties:
      first_seen:
        type: object
        description: Defines the first time an event occured using a absolute time frame or a relative ime frame. If absolute time frame is defined, the relative will be ignored.
        properties:
          absolute:
            type: object
            properties:
              from:
                type: string
                description: Start time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
                example: 2018-02-28T22:47:09.038+02:00
              to:
                type: string
                description: End time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
                example: 2018-02-28T22:47:09.038+02:00
          relative:
            type: string
            enum: [last_hour, last_3h, last_6h, last_12h, last_24h, last_48h, last_7d, last_14d, last_30d]
            example: "last_6h"
      labels:
        type: array
        description: List of labels
        items:
          type: string
          example: Jira
      event_type:
        type: array
        description: List of event types
        items:
          type: string
          enum: [Uncaught Exceptions, Caught Exceptions, Swallowed Exceptions, Logged Warnings, Logged Errors, HTTP Errors, Timers]
          example: Swallowed Exceptions
      event_name:
        type: array
        description: (Not implemented yet) List of event names
        items:
          type: string
          example: IndexOutOfBoundsException
      event_location:
        type: array
        description: (Not implemented yet) List of event locations
        items:
          type: string
          example: DotConnect
      event_package:
        type: array
        description: (Not implemented yet) List of event packages
        items:
          type: string
          example: com.dotmarketing.servlets
      entry_point:
        type: array
        description: (Not implemented yet) List of entrypoints
        items:
          type: string
      servers:
        type: array
        description: (Not implemented yet) List of server names
        items:
          type: string
          example: na-dotCMS-2
      apps:
        type: array
        description: (Not implemented yet) List of application names
        items:
          type: string
          example: API
      deployments:
        type: array
        description: (Not implemented yet) List of deployment names
        items:
          type: string
          example: 2018-04-11-2
      introduced_by:
        type: array
        description: (Not implemented yet) Filters events by deployment they originated in
        items:
          type: string
          example: Unnamed Deployment
      search:
        type: string
        description: (Not implemented yet) Free text search
  Event:
    description: An exception, logged error and more
    type: object
    properties:
      id:
        type: string
        example: "1"
      summary:
        type: string
        example: "NullPointerException in Main.main"
      type:
        type: string
        example: "Uncaught Exception"
      name:
        type: string
        example: "NullPointerException"
      first_seen:
        type: string
        example: "2018-02-28T22:47:09.038Z"
      introduced_by:
        type: string
        example: "1.201.1"
      labels:
        type: array
        items:
          type: string
          example: "Critical"
      similar_event_ids:
        type: array
        items:
          type: string
          example: "K2"
      jira_issue_url:
        type: "string"
        example: "https://example.atlassian.net/browse/EX-103"
      error_location:
        $ref: "#/definitions/CodeLocation"
      entry_point:
        $ref: "#/definitions/CodeLocation"
      error_origin:
        $ref: "#/definitions/CodeLocation"
      stats:
        $ref: "#/definitions/EventStats"
  EventStats:
    type: object
    properties:
      hits:
        type: integer
        example: 42
      invocations:
        type: integer
        example: 51929
  EntryPoint:
    type: object
    properties:
      name:
        type: string
        example: LoginServlet
      stats:
        $ref: "#/definitions/EntryPointStats"
  EntryPointStats:
    type: object
    properties:
      invocations:
        type: integer
        example: 42
  Label:
    type: object
    properties:
      name:
        type: string
        example: HighPriority
      type:
        type: string
        enum:
          - DEFAULT
          - USER
        example: USER
      color: #consider adding available colors as enum
        type: string
        example: RED
  Server:
    type: object
    properties:
      name:
        type: string
        example: ip57-110-0-18
      active:
        type: boolean
        example: true
  Application:
    type: object
    properties:
      name:
        type: string
        example: jobs-api
      active:
        type: boolean
        example: true
  Deployment:
    type: object
    properties:
      name:
        type: string
        example: stage1.0.4
      active:
        type: boolean
        example: true
  CodeLocation:
    description: A code location, for error location, etc
    type: object
    properties:
      prettified_name:
        type: string
        example: "Main.main"
      class_name:
        type: string
        example: "com.company.Main"
      method_name:
        type: string
        example: "main"
      method_desc:
        type: string
        example: "([Ljava/lang/String;)V"
  EventAction:
    properties:
      type:
        type: string
        example: "Label"
      action:
        type: string
        example: "Add Label"
      data:
        type: string
        example: "Critical"
      timestamp:
        type: string
        description: Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038Z"
      initiator:
        type: string
        example: "joe@example.com"
      initiator_type:
        type: string
        example: "User"
  EnvironmentWithRole:
    type: object
    description: Environment data including user's role
    properties:
      EnvironmentBasic:
        type: object
        description: Basic information about a environment key
        properties:
          id:
            type: string
            example: S100
          name:
            type: string
            example: Pre-prod
          full_key:
            type: string
            example: S35817XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      role:
        type: string
        description: user's role in the environment
        example: admin
  EnvironmentBasic:
    type: object
    description: Basic information about a environment key
    properties:
      id:
        type: string
        example: S100
      name:
        type: string
        example: Pre-prod
      full_key:
        type: string
        example: S35817XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  TeamMembersBasic:
    description: List of environment team members
    type: array
    items:
      type: object
      properties:
        email:
          type: string
          example: jane.doe@company.com
        role:
          type: string
          description: owner / admin / member
          example: admin
  TeamMembersFull:
    description: List of environment team members
    type: array
    items:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
        email:
          type: string
          example: jane.doe@company.com
        role:
          type: string
          description: owner / admin / member
          example: admin
        state:
          type: string
          description: active / pending invitation
          example: active
  StorageSettings:
    type: object
    properties:
      type:
        type: string
        enum:
          - HYBRID
          - HOSTED
        example: HYBRID
      hostname:
        description: Relevant for hybrid storage only. Both hostname and ip may be used. For cloud storage, NA value will be returned
        type: string
        example: storage.company.com
      frontend_hostname:
        description: OPTIONAL Relevant for hybrid storage only. Both hostname and ip may be used. For cloud storage, NA value will be returned
        type: string
        example: 123.91.12.100
  UDFLibrary:
    description: UDF Properties
    type: object
    properties:
      id:
        type: string
        example: L34
      version:
        type: string
        example: 1.0
      backward_compatible:
        type: string
        example: true
      functions:
        type: array
        items:
          $ref: "#/definitions/UDF"
  UDF:
    type: object
    properties:
      function_type:
        type: string
        example: ANOMALY
      short_description: #this is the udf name
        type: string
        example: Relative Threshold
      long_description:
        type: string
        example: This function compares the volume of events against an absolute threshold
      param_type:
        type: string
        example: TEXT
      default_params:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              example: X
            default_value:
              type: string
              example: 100
  Timer:
    description: Timer properties
    type: object
    properties:
      id:
        type: string
        description: This is an auto generated ID. When creating/editing a timer, the value recevied in this field will be ignored.
        example: 34
      class_name:
        type: string
        example: DBManager
      method_name:
        type: string
        example: SaveWithRetries
      threshold:
        type: integer
        description: Threshold in ms
        example: 8000
      servers:
        type: array
        items:
          type: string
          example: na-dotCMS-2
      applications:
        type: array
        items:
          type: string
          example: MyApp
responses:
  OK:
    description: OK
  TBD:
    description: TBD
  UnauthorizedError:
    description: Unauthorized
  NotFoundError:
    description: Not Found
  ForbiddenError:
    description: Forbidden
  BadRequestError:
    description: Bad Request
  Conflict:
    description: Conflict
